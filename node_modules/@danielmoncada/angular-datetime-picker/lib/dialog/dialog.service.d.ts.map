{"version":3,"file":"dialog.service.d.ts","sources":["dialog.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**\n * dialog.service\n */\nimport { InjectionToken, Injector, TemplateRef } from '@angular/core';\nimport { Location } from '@angular/common';\nimport { OwlDialogConfig, OwlDialogConfigInterface } from './dialog-config.class';\nimport { OwlDialogRef } from './dialog-ref.class';\nimport { Observable, Subject } from 'rxjs';\nimport { Overlay, OverlayContainer, ScrollStrategy } from '@angular/cdk/overlay';\nimport { ComponentType } from '@angular/cdk/portal';\nexport declare const OWL_DIALOG_DATA: InjectionToken<any>;\n/**\n * Injection token that determines the scroll handling while the dialog is open.\n * */\nexport declare const OWL_DIALOG_SCROLL_STRATEGY: InjectionToken<() => ScrollStrategy>;\nexport declare function OWL_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay): () => ScrollStrategy;\n/** @docs-private */\nexport declare const OWL_DIALOG_SCROLL_STRATEGY_PROVIDER: {\n    provide: InjectionToken<() => ScrollStrategy>;\n    deps: (typeof Overlay)[];\n    useFactory: typeof OWL_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY;\n};\n/**\n * Injection token that can be used to specify default dialog options.\n * */\nexport declare const OWL_DIALOG_DEFAULT_OPTIONS: InjectionToken<OwlDialogConfig>;\nexport declare class OwlDialogService {\n    private overlay;\n    private injector;\n    private location;\n    private defaultOptions;\n    private parentDialog;\n    private overlayContainer;\n    private ariaHiddenElements;\n    private _openDialogsAtThisLevel;\n    private _afterOpenAtThisLevel;\n    private _afterAllClosedAtThisLevel;\n    /** Keeps track of the currently-open dialogs. */\n    get openDialogs(): OwlDialogRef<any>[];\n    /** Stream that emits when a dialog has been opened. */\n    get afterOpen(): Subject<OwlDialogRef<any>>;\n    get _afterAllClosed(): any;\n    /**\n     * Stream that emits when all open dialog have finished closing.\n     * Will emit on subscribe if there are no open dialogs to begin with.\n     */\n    afterAllClosed: Observable<{}>;\n    private readonly scrollStrategy;\n    constructor(overlay: Overlay, injector: Injector, location: Location, scrollStrategy: any, defaultOptions: OwlDialogConfigInterface, parentDialog: OwlDialogService, overlayContainer: OverlayContainer);\n    open<T>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>, config?: OwlDialogConfigInterface): OwlDialogRef<any>;\n    /**\n     * Closes all of the currently-open dialogs.\n     */\n    closeAll(): void;\n    /**\n     * Finds an open dialog by its id.\n     * @param id ID to use when looking up the dialog.\n     */\n    getDialogById(id: string): OwlDialogRef<any> | undefined;\n    private attachDialogContent;\n    private createInjector;\n    private createOverlay;\n    private attachDialogContainer;\n    private getOverlayConfig;\n    private removeOpenDialog;\n    /**\n     * Hides all of the content that isn't an overlay from assistive technology.\n     */\n    private hideNonDialogContentFromAssistiveTechnology;\n}\n"]}