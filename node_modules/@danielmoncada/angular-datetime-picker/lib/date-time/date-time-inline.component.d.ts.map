{"version":3,"file":"date-time-inline.component.d.ts","sources":["date-time-inline.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**\n * date-time-inline.component\n */\nimport { ChangeDetectorRef, EventEmitter, OnInit } from '@angular/core';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { OwlDateTime, PickerMode, PickerType, SelectMode } from './date-time.class';\nimport { DateTimeAdapter } from './adapter/date-time-adapter.class';\nimport { OwlDateTimeFormats } from './adapter/date-time-format.class';\nimport { OwlDateTimeContainerComponent } from './date-time-picker-container.component';\nexport declare const OWL_DATETIME_VALUE_ACCESSOR: any;\nexport declare class OwlDateTimeInlineComponent<T> extends OwlDateTime<T> implements OnInit, ControlValueAccessor {\n    protected changeDetector: ChangeDetectorRef;\n    protected dateTimeAdapter: DateTimeAdapter<T>;\n    protected dateTimeFormats: OwlDateTimeFormats;\n    container: OwlDateTimeContainerComponent<T>;\n    /**\n     * Set the type of the dateTime picker\n     *      'both' -- show both calendar and timer\n     *      'calendar' -- show only calendar\n     *      'timer' -- show only timer\n     */\n    private _pickerType;\n    get pickerType(): PickerType;\n    set pickerType(val: PickerType);\n    private _disabled;\n    get disabled(): boolean;\n    set disabled(value: boolean);\n    private _selectMode;\n    get selectMode(): SelectMode;\n    set selectMode(mode: SelectMode);\n    /** The date to open the calendar to initially. */\n    private _startAt;\n    get startAt(): T | null;\n    set startAt(date: T | null);\n    /** The date to open for range calendar. */\n    private _endAt;\n    get endAt(): T | null;\n    set endAt(date: T | null);\n    private _dateTimeFilter;\n    get dateTimeFilter(): (date: T | null) => boolean;\n    set dateTimeFilter(filter: (date: T | null) => boolean);\n    /** The minimum valid date. */\n    private _min;\n    get minDateTime(): T | null;\n    set minDateTime(value: T | null);\n    /** The maximum valid date. */\n    private _max;\n    get maxDateTime(): T | null;\n    set maxDateTime(value: T | null);\n    private _value;\n    get value(): T | null;\n    set value(value: T | null);\n    private _values;\n    get values(): T[];\n    set values(values: T[]);\n    /**\n     * Emits selected year in multi-year view\n     * This doesn't imply a change on the selected date.\n     * */\n    yearSelected: EventEmitter<T>;\n    /**\n     * Emits selected month in year view\n     * This doesn't imply a change on the selected date.\n     * */\n    monthSelected: EventEmitter<T>;\n    private _selected;\n    get selected(): T | null;\n    set selected(value: T | null);\n    private _selecteds;\n    get selecteds(): T[];\n    set selecteds(values: T[]);\n    get opened(): boolean;\n    get pickerMode(): PickerMode;\n    get isInSingleMode(): boolean;\n    get isInRangeMode(): boolean;\n    get owlDTInlineClass(): boolean;\n    private onModelChange;\n    private onModelTouched;\n    constructor(changeDetector: ChangeDetectorRef, dateTimeAdapter: DateTimeAdapter<T>, dateTimeFormats: OwlDateTimeFormats);\n    ngOnInit(): void;\n    writeValue(value: any): void;\n    registerOnChange(fn: any): void;\n    registerOnTouched(fn: any): void;\n    setDisabledState(isDisabled: boolean): void;\n    select(date: T[] | T): void;\n    /**\n     * Emits the selected year in multi-year view\n     * */\n    selectYear(normalizedYear: T): void;\n    /**\n     * Emits selected month in year view\n     * */\n    selectMonth(normalizedMonth: T): void;\n}\n"]}