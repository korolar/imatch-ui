{"version":3,"file":"timer.component.d.ts","sources":["timer.component.d.ts"],"names":[],"mappingssourcesContent":["/**\n * timer.component\n */\nimport { ChangeDetectorRef, ElementRef, EventEmitter, NgZone, OnInit } from '@angular/core';\nimport { OwlDateTimeIntl } from './date-time-picker-intl.service';\nimport { DateTimeAdapter } from './adapter/date-time-adapter.class';\nexport declare class OwlTimerComponent<T> implements OnInit {\n    private ngZone;\n    private elmRef;\n    private pickerIntl;\n    private cdRef;\n    private dateTimeAdapter;\n    /** The current picker moment */\n    private _pickerMoment;\n    get pickerMoment(): T;\n    set pickerMoment(value: T);\n    /** The minimum selectable date time. */\n    private _minDateTime;\n    get minDateTime(): T | null;\n    set minDateTime(value: T | null);\n    /** The maximum selectable date time. */\n    private _maxDateTime;\n    get maxDateTime(): T | null;\n    set maxDateTime(value: T | null);\n    private isPM;\n    /**\n     * Whether to show the second's timer\n     */\n    showSecondsTimer: boolean;\n    /**\n     * Whether the timer is in hour12 format\n     */\n    hour12Timer: boolean;\n    /**\n     * Hours to change per step\n     */\n    stepHour: number;\n    /**\n     * Minutes to change per step\n     */\n    stepMinute: number;\n    /**\n     * Seconds to change per step\n     */\n    stepSecond: number;\n    get hourValue(): number;\n    /**\n     * The value would be displayed in hourBox.\n     * We need this because the value displayed in hourBox it not\n     * the same as the hourValue when the timer is in hour12Timer mode.\n     * */\n    get hourBoxValue(): number;\n    get minuteValue(): number;\n    get secondValue(): number;\n    get upHourButtonLabel(): string;\n    get downHourButtonLabel(): string;\n    get upMinuteButtonLabel(): string;\n    get downMinuteButtonLabel(): string;\n    get upSecondButtonLabel(): string;\n    get downSecondButtonLabel(): string;\n    get hour12ButtonLabel(): string;\n    selectedChange: EventEmitter<T>;\n    get owlDTTimerClass(): boolean;\n    get owlDTTimeTabIndex(): number;\n    constructor(ngZone: NgZone, elmRef: ElementRef, pickerIntl: OwlDateTimeIntl, cdRef: ChangeDetectorRef, dateTimeAdapter: DateTimeAdapter<T>);\n    ngOnInit(): void;\n    /**\n     * Focus to the host element\n     * */\n    focus(): void;\n    /**\n     * Set the hour value via typing into timer box input\n     * We need this to handle the hour value when the timer is in hour12 mode\n     * */\n    setHourValueViaInput(hours: number): void;\n    setHourValue(hours: number): void;\n    setMinuteValue(minutes: number): void;\n    setSecondValue(seconds: number): void;\n    setMeridiem(event: any): void;\n    /**\n     * Check if the up hour button is enabled\n     */\n    upHourEnabled(): boolean;\n    /**\n     * Check if the down hour button is enabled\n     */\n    downHourEnabled(): boolean;\n    /**\n     * Check if the up minute button is enabled\n     */\n    upMinuteEnabled(): boolean;\n    /**\n     * Check if the down minute button is enabled\n     */\n    downMinuteEnabled(): boolean;\n    /**\n     * Check if the up second button is enabled\n     */\n    upSecondEnabled(): boolean;\n    /**\n     * Check if the down second button is enabled\n     */\n    downSecondEnabled(): boolean;\n    /**\n     * PickerMoment's hour value +/- certain amount and compare it to the give date\n     * 1 is after the comparedDate\n     * -1 is before the comparedDate\n     * 0 is equal the comparedDate\n     * */\n    private compareHours;\n    /**\n     * PickerMoment's minute value +/- certain amount and compare it to the give date\n     * 1 is after the comparedDate\n     * -1 is before the comparedDate\n     * 0 is equal the comparedDate\n     * */\n    private compareMinutes;\n    /**\n     * PickerMoment's second value +/- certain amount and compare it to the give date\n     * 1 is after the comparedDate\n     * -1 is before the comparedDate\n     * 0 is equal the comparedDate\n     * */\n    private compareSeconds;\n    /**\n     * Get a valid date object\n     */\n    private getValidDate;\n}\n"]}