{"version":3,"file":"date-time-picker.component.d.ts","sources":["date-time-picker.component.d.ts"],"names":[],"mappingssourcesContent":["/**\n * date-time-picker.component\n */\nimport { ChangeDetectorRef, EventEmitter, InjectionToken, NgZone, OnDestroy, OnInit, ViewContainerRef } from '@angular/core';\nimport { BlockScrollStrategy, Overlay, ScrollStrategy } from '@angular/cdk/overlay';\nimport { OwlDateTimeInputDirective } from './date-time-picker-input.directive';\nimport { DateTimeAdapter } from './adapter/date-time-adapter.class';\nimport { OwlDateTimeFormats } from './adapter/date-time-format.class';\nimport { OwlDateTime, PickerMode, PickerType, SelectMode } from './date-time.class';\nimport { OwlDialogService } from '../dialog/dialog.service';\n/** Injection token that determines the scroll handling while the dtPicker is open. */\nexport declare const OWL_DTPICKER_SCROLL_STRATEGY: InjectionToken<() => ScrollStrategy>;\n/** @docs-private */\nexport declare function OWL_DTPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay): () => BlockScrollStrategy;\n/** @docs-private */\nexport declare const OWL_DTPICKER_SCROLL_STRATEGY_PROVIDER: {\n    provide: InjectionToken<() => ScrollStrategy>;\n    deps: (typeof Overlay)[];\n    useFactory: typeof OWL_DTPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY;\n};\nexport declare class OwlDateTimeComponent<T> extends OwlDateTime<T> implements OnInit, OnDestroy {\n    overlay: Overlay;\n    private viewContainerRef;\n    private dialogService;\n    private ngZone;\n    protected changeDetector: ChangeDetectorRef;\n    protected dateTimeAdapter: DateTimeAdapter<T>;\n    protected dateTimeFormats: OwlDateTimeFormats;\n    private document;\n    /** Custom class for the picker backdrop. */\n    backdropClass: string | string[];\n    /** Custom class for the picker overlay pane. */\n    panelClass: string | string[];\n    /** The date to open the calendar to initially. */\n    private _startAt;\n    get startAt(): T | null;\n    set startAt(date: T | null);\n    /** The end date to set for range calendar. */\n    private _endAt;\n    get endAt(): T | null;\n    set endAt(date: T | null);\n    /**\n     * Set the type of the dateTime picker\n     *      'both' -- show both calendar and timer\n     *      'calendar' -- show only calendar\n     *      'timer' -- show only timer\n     */\n    private _pickerType;\n    get pickerType(): PickerType;\n    set pickerType(val: PickerType);\n    /**\n     * Whether the picker open as a dialog\n     */\n    _pickerMode: PickerMode;\n    get pickerMode(): PickerMode;\n    set pickerMode(mode: PickerMode);\n    /** Whether the date time picker should be disabled. */\n    private _disabled;\n    get disabled(): boolean;\n    set disabled(value: boolean);\n    /** Whether the calendar is open. */\n    private _opened;\n    get opened(): boolean;\n    set opened(val: boolean);\n    /**\n     * The scroll strategy when the picker is open\n     * Learn more this from https://material.angular.io/cdk/overlay/overview#scroll-strategies\n     * */\n    scrollStrategy: ScrollStrategy;\n    /**\n     * Callback when the picker is closed\n     * */\n    afterPickerClosed: EventEmitter<any>;\n    /**\n     * Callback when the picker is open\n     * */\n    afterPickerOpen: EventEmitter<any>;\n    /**\n     * Emits selected year in multi-year view\n     * This doesn't imply a change on the selected date.\n     * */\n    yearSelected: EventEmitter<T>;\n    /**\n     * Emits selected month in year view\n     * This doesn't imply a change on the selected date.\n     * */\n    monthSelected: EventEmitter<T>;\n    /**\n     * Emit when the selected value has been confirmed\n     * */\n    confirmSelectedChange: EventEmitter<T | T[]>;\n    /**\n     * Emits when the date time picker is disabled.\n     * */\n    disabledChange: EventEmitter<boolean>;\n    private pickerContainerPortal;\n    private pickerContainer;\n    private popupRef;\n    private dialogRef;\n    private dtInputSub;\n    private hidePickerStreamSub;\n    private confirmSelectedStreamSub;\n    private pickerOpenedStreamSub;\n    /** The element that was focused before the date time picker was opened. */\n    private focusedElementBeforeOpen;\n    private _dtInput;\n    get dtInput(): OwlDateTimeInputDirective<T>;\n    private _selected;\n    get selected(): T | null;\n    set selected(value: T | null);\n    private _selecteds;\n    get selecteds(): T[];\n    set selecteds(values: T[]);\n    /** The minimum selectable date. */\n    get minDateTime(): T | null;\n    /** The maximum selectable date. */\n    get maxDateTime(): T | null;\n    get dateTimeFilter(): (date: T | null) => boolean;\n    get selectMode(): SelectMode;\n    get isInSingleMode(): boolean;\n    get isInRangeMode(): boolean;\n    private readonly defaultScrollStrategy;\n    constructor(overlay: Overlay, viewContainerRef: ViewContainerRef, dialogService: OwlDialogService, ngZone: NgZone, changeDetector: ChangeDetectorRef, dateTimeAdapter: DateTimeAdapter<T>, defaultScrollStrategy: any, dateTimeFormats: OwlDateTimeFormats, document: any);\n    ngOnInit(): void;\n    ngOnDestroy(): void;\n    registerInput(input: OwlDateTimeInputDirective<T>): void;\n    open(): void;\n    /**\n     * Selects the given date\n     */\n    select(date: T[] | T): void;\n    /**\n     * Emits the selected year in multi-year view\n     * */\n    selectYear(normalizedYear: T): void;\n    /**\n     * Emits selected month in year view\n     * */\n    selectMonth(normalizedMonth: T): void;\n    /**\n     * Hide the picker\n     */\n    close(): void;\n    /**\n     * Confirm the selected value\n     */\n    confirmSelect(event?: any): void;\n    /**\n     * Open the picker as a dialog\n     */\n    private openAsDialog;\n    /**\n     * Open the picker as popup\n     */\n    private openAsPopup;\n    private createPopup;\n    /**\n     * Create the popup PositionStrategy.\n     * */\n    private createPopupPositionStrategy;\n}\n"]}