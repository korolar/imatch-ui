{"version":3,"file":"native-date-time-adapter.class.d.ts","sources":["native-date-time-adapter.class.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**\n * native-date-time-adapter.class\n */\nimport { Platform } from '@angular/cdk/platform';\nimport { DateTimeAdapter } from './date-time-adapter.class';\nexport declare class NativeDateTimeAdapter extends DateTimeAdapter<Date> {\n    private owlDateTimeLocale;\n    /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\n    private readonly _clampDate;\n    /**\n     * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n     * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n     * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n     * will produce `'8/13/1800'`.\n     */\n    useUtcForDisplay: boolean;\n    constructor(owlDateTimeLocale: string, platform: Platform);\n    getYear(date: Date): number;\n    getMonth(date: Date): number;\n    getDay(date: Date): number;\n    getDate(date: Date): number;\n    getHours(date: Date): number;\n    getMinutes(date: Date): number;\n    getSeconds(date: Date): number;\n    getTime(date: Date): number;\n    getNumDaysInMonth(date: Date): number;\n    differenceInCalendarDays(dateLeft: Date, dateRight: Date): number;\n    getYearName(date: Date): string;\n    getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n    getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n    getDateNames(): string[];\n    toIso8601(date: Date): string;\n    isEqual(dateLeft: Date, dateRight: Date): boolean;\n    isSameDay(dateLeft: Date, dateRight: Date): boolean;\n    isValid(date: Date): boolean;\n    invalid(): Date;\n    isDateInstance(obj: any): boolean;\n    addCalendarYears(date: Date, amount: number): Date;\n    addCalendarMonths(date: Date, amount: number): Date;\n    addCalendarDays(date: Date, amount: number): Date;\n    setHours(date: Date, amount: number): Date;\n    setMinutes(date: Date, amount: number): Date;\n    setSeconds(date: Date, amount: number): Date;\n    createDate(year: number, month: number, date: number, hours?: number, minutes?: number, seconds?: number): Date;\n    clone(date: Date): Date;\n    now(): Date;\n    format(date: Date, displayFormat: any): string;\n    parse(value: any, parseFormat: any): Date | null;\n    /**\n     * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n     * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n     * invalid date for all other values.\n     */\n    deserialize(value: any): Date | null;\n    /**\n     * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n     * other browsers do not. We remove them to make output consistent and because they interfere with\n     * date parsing.\n     */\n    private stripDirectionalityCharacters;\n    /**\n     * When converting Date object to string, javascript built-in functions may return wrong\n     * results because it applies its internal DST rules. The DST rules around the world change\n     * very frequently, and the current valid rule is not always valid in previous years though.\n     * We work around this problem building a new Date object which has its internal UTC\n     * representation with the local date and time.\n     */\n    private _format;\n}\n"]}