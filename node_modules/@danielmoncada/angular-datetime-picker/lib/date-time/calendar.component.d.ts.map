{"version":3,"file":"calendar.component.d.ts","sources":["calendar.component.d.ts"],"names":[],"mappingssourcesContent":["/**\n * calendar.component\n */\nimport { AfterContentInit, AfterViewChecked, ChangeDetectorRef, ElementRef, EventEmitter, NgZone, OnDestroy, OnInit } from '@angular/core';\nimport { OwlDateTimeIntl } from './date-time-picker-intl.service';\nimport { DateTimeAdapter } from './adapter/date-time-adapter.class';\nimport { OwlDateTimeFormats } from './adapter/date-time-format.class';\nimport { DateView, DateViewType, SelectMode } from './date-time.class';\nexport declare class OwlCalendarComponent<T> implements OnInit, AfterContentInit, AfterViewChecked, OnDestroy {\n    private elmRef;\n    private pickerIntl;\n    private ngZone;\n    private cdRef;\n    private dateTimeAdapter;\n    private dateTimeFormats;\n    DateView: typeof DateView;\n    get minDate(): T | null;\n    set minDate(value: T | null);\n    get maxDate(): T | null;\n    set maxDate(value: T | null);\n    get pickerMoment(): T;\n    set pickerMoment(value: T);\n    get selected(): T | null;\n    set selected(value: T | null);\n    get selecteds(): T[];\n    set selecteds(values: T[]);\n    get periodButtonText(): string;\n    get periodButtonLabel(): string;\n    get prevButtonLabel(): string;\n    get nextButtonLabel(): string;\n    get currentView(): DateViewType;\n    set currentView(view: DateViewType);\n    get isInSingleMode(): boolean;\n    get isInRangeMode(): boolean;\n    get showControlArrows(): boolean;\n    get isMonthView(): boolean;\n    /**\n     * Bind class 'owl-dt-calendar' to host\n     * */\n    get owlDTCalendarClass(): boolean;\n    constructor(elmRef: ElementRef, pickerIntl: OwlDateTimeIntl, ngZone: NgZone, cdRef: ChangeDetectorRef, dateTimeAdapter: DateTimeAdapter<T>, dateTimeFormats: OwlDateTimeFormats);\n    /**\n     * Date filter for the month and year view\n     * */\n    dateFilter: (date: T) => boolean;\n    /**\n     * Set the first day of week\n     */\n    firstDayOfWeek: number;\n    /** The minimum selectable date. */\n    private _minDate;\n    /** The maximum selectable date. */\n    private _maxDate;\n    /** The current picker moment */\n    private _pickerMoment;\n    selectMode: SelectMode;\n    /** The currently selected moment. */\n    private _selected;\n    private _selecteds;\n    /**\n     * The view that the calendar should start in.\n     */\n    startView: DateViewType;\n    /**\n     * Whether to should only the year and multi-year views.\n     */\n    yearOnly: boolean;\n    /**\n     * Whether to should only the multi-year view.\n     */\n    multiyearOnly: boolean;\n    /**\n     * Whether to hide dates in other months at the start or end of the current month.\n     * */\n    hideOtherMonths: boolean;\n    /** Emits when the currently picker moment changes. */\n    pickerMomentChange: EventEmitter<T>;\n    /** Emits when the currently selected date changes. */\n    selectedChange: EventEmitter<T>;\n    /** Emits when any date is selected. */\n    userSelection: EventEmitter<void>;\n    /**\n     * Emits the selected year. This doesn't imply a change on the selected date\n     * */\n    readonly yearSelected: EventEmitter<T>;\n    /**\n     * Emits the selected month. This doesn't imply a change on the selected date\n     * */\n    readonly monthSelected: EventEmitter<T>;\n    private _currentView;\n    private intlChangesSub;\n    /**\n     * Used for scheduling that focus should be moved to the active cell on the next tick.\n     * We need to schedule it, rather than do it immediately, because we have to wait\n     * for Angular to re-evaluate the view children.\n     */\n    private moveFocusOnNextTick;\n    /**\n     * Date filter for the month and year view\n     */\n    dateFilterForViews: (date: T) => boolean;\n    ngOnInit(): void;\n    ngAfterContentInit(): void;\n    ngAfterViewChecked(): void;\n    ngOnDestroy(): void;\n    /**\n     * Toggle between month view and year view\n     */\n    toggleViews(): void;\n    /**\n     * Handles user clicks on the previous button.\n     * */\n    previousClicked(): void;\n    /**\n     * Handles user clicks on the next button.\n     * */\n    nextClicked(): void;\n    dateSelected(date: T): void;\n    /**\n     * Change the pickerMoment value and switch to a specific view\n     */\n    goToDateInView(date: T, view: DateViewType): void;\n    /**\n     * Change the pickerMoment value\n     */\n    handlePickerMomentChange(date: T): void;\n    userSelected(): void;\n    /**\n     * Whether the previous period button is enabled.\n     */\n    prevButtonEnabled(): boolean;\n    /**\n     * Whether the next period button is enabled.\n     */\n    nextButtonEnabled(): boolean;\n    /**\n     * Focus to the host element\n     * */\n    focusActiveCell(): void;\n    selectYearInMultiYearView(normalizedYear: T): void;\n    selectMonthInYearView(normalizedMonth: T): void;\n    /**\n     * Whether the two dates represent the same view in the current view mode (month or year).\n     */\n    private isSameView;\n    /**\n     * Get a valid date object\n     */\n    private getValidDate;\n}\n"]}