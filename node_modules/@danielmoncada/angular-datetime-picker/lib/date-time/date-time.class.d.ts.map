{"version":3,"file":"date-time.class.d.ts","sources":["date-time.class.d.ts"],"names":[],"mappingssourcesContent":["/**\n * date-time.class\n */\nimport { EventEmitter } from '@angular/core';\nimport { DateTimeAdapter } from './adapter/date-time-adapter.class';\nimport { OwlDateTimeFormats } from './adapter/date-time-format.class';\nexport declare type PickerType = 'both' | 'calendar' | 'timer';\nexport declare type PickerMode = 'popup' | 'dialog' | 'inline';\nexport declare type SelectMode = 'single' | 'range' | 'rangeFrom' | 'rangeTo';\nexport declare enum DateView {\n    MONTH = \"month\",\n    YEAR = \"year\",\n    MULTI_YEARS = \"multi-years\"\n}\nexport declare type DateViewType = DateView.MONTH | DateView.YEAR | DateView.MULTI_YEARS;\nexport declare abstract class OwlDateTime<T> {\n    protected dateTimeAdapter: DateTimeAdapter<T>;\n    protected dateTimeFormats: OwlDateTimeFormats;\n    /**\n     * Whether to show the second's timer\n     */\n    private _showSecondsTimer;\n    get showSecondsTimer(): boolean;\n    set showSecondsTimer(val: boolean);\n    /**\n     * Whether the timer is in hour12 format\n     */\n    private _hour12Timer;\n    get hour12Timer(): boolean;\n    set hour12Timer(val: boolean);\n    /**\n     * The view that the calendar should start in.\n     */\n    startView: DateViewType;\n    /**\n     * Whether to should only the year and multi-year views.\n     */\n    yearOnly: boolean;\n    /**\n     * Whether to should only the multi-year view.\n     */\n    multiyearOnly: boolean;\n    /**\n     * Hours to change per step\n     */\n    private _stepHour;\n    get stepHour(): number;\n    set stepHour(val: number);\n    /**\n     * Minutes to change per step\n     */\n    private _stepMinute;\n    get stepMinute(): number;\n    set stepMinute(val: number);\n    /**\n     * Seconds to change per step\n     */\n    private _stepSecond;\n    get stepSecond(): number;\n    set stepSecond(val: number);\n    /**\n     * Set the first day of week\n     */\n    private _firstDayOfWeek;\n    get firstDayOfWeek(): number;\n    set firstDayOfWeek(value: number);\n    /**\n     * Whether to hide dates in other months at the start or end of the current month.\n     */\n    private _hideOtherMonths;\n    get hideOtherMonths(): boolean;\n    set hideOtherMonths(val: boolean);\n    private readonly _id;\n    get id(): string;\n    abstract get selected(): T | null;\n    abstract get selecteds(): T[] | null;\n    abstract get dateTimeFilter(): (date: T | null) => boolean;\n    abstract get maxDateTime(): T | null;\n    abstract get minDateTime(): T | null;\n    abstract get selectMode(): SelectMode;\n    abstract get startAt(): T | null;\n    abstract get endAt(): T | null;\n    abstract get opened(): boolean;\n    abstract get pickerMode(): PickerMode;\n    abstract get pickerType(): PickerType;\n    abstract get isInSingleMode(): boolean;\n    abstract get isInRangeMode(): boolean;\n    abstract select(date: T | T[]): void;\n    abstract yearSelected: EventEmitter<T>;\n    abstract monthSelected: EventEmitter<T>;\n    abstract selectYear(normalizedYear: T): void;\n    abstract selectMonth(normalizedMonth: T): void;\n    get formatString(): string;\n    /**\n     * Date Time Checker to check if the give dateTime is selectable\n     */\n    dateTimeChecker: (dateTime: T) => boolean;\n    get disabled(): boolean;\n    protected constructor(dateTimeAdapter: DateTimeAdapter<T>, dateTimeFormats: OwlDateTimeFormats);\n    protected getValidDate(obj: any): T | null;\n}\n"]}