{"version":3,"file":"date-time-picker-input.directive.d.ts","sources":["date-time-picker-input.directive.d.ts"],"names":[],"mappingssourcesContent":["/**\n * date-time-picker-input.directive\n */\nimport { AfterContentInit, ElementRef, EventEmitter, OnDestroy, OnInit, Renderer2 } from '@angular/core';\nimport { AbstractControl, ControlValueAccessor, Validator } from '@angular/forms';\nimport { OwlDateTimeComponent } from './date-time-picker.component';\nimport { DateTimeAdapter } from './adapter/date-time-adapter.class';\nimport { OwlDateTimeFormats } from './adapter/date-time-format.class';\nimport { SelectMode } from './date-time.class';\nexport declare const OWL_DATETIME_VALUE_ACCESSOR: any;\nexport declare const OWL_DATETIME_VALIDATORS: any;\nexport declare class OwlDateTimeInputDirective<T> implements OnInit, AfterContentInit, OnDestroy, ControlValueAccessor, Validator {\n    private elmRef;\n    private renderer;\n    private dateTimeAdapter;\n    private dateTimeFormats;\n    static ngAcceptInputType_disabled: boolean | '';\n    /**\n    * Required flag to be used for range of [null, null]\n    * */\n    private _required;\n    get required(): any;\n    set required(value: any);\n    /**\n     * The date time picker that this input is associated with.\n     * */\n    set owlDateTime(value: OwlDateTimeComponent<T>);\n    /**\n     * A function to filter date time\n     */\n    set owlDateTimeFilter(filter: (date: T | null) => boolean);\n    private _dateTimeFilter;\n    get dateTimeFilter(): (date: T) => boolean;\n    /** Whether the date time picker's input is disabled. */\n    private _disabled;\n    get disabled(): boolean;\n    set disabled(value: boolean);\n    /** The minimum valid date. */\n    private _min;\n    get min(): T | null;\n    set min(value: T | null);\n    /** The maximum valid date. */\n    private _max;\n    get max(): T | null;\n    set max(value: T | null);\n    /**\n     * The picker's select mode\n     */\n    private _selectMode;\n    get selectMode(): SelectMode;\n    set selectMode(mode: SelectMode);\n    /**\n     * The character to separate the 'from' and 'to' in input value\n     */\n    rangeSeparator: string;\n    private _value;\n    get value(): T | null;\n    set value(value: T | null);\n    private _values;\n    get values(): T[];\n    set values(values: T[]);\n    /**\n     * Callback to invoke when `change` event is fired on this `<input>`\n     * */\n    dateTimeChange: EventEmitter<any>;\n    /**\n     * Callback to invoke when an `input` event is fired on this `<input>`.\n     * */\n    dateTimeInput: EventEmitter<any>;\n    get elementRef(): ElementRef;\n    get isInSingleMode(): boolean;\n    get isInRangeMode(): boolean;\n    /** The date-time-picker that this input is associated with. */\n    dtPicker: OwlDateTimeComponent<T>;\n    private dtPickerSub;\n    private localeSub;\n    private lastValueValid;\n    private onModelChange;\n    private onModelTouched;\n    private validatorOnChange;\n    /** The form control validator for whether the input parses. */\n    private parseValidator;\n    /** The form control validator for the min date. */\n    private minValidator;\n    /** The form control validator for the max date. */\n    private maxValidator;\n    /** The form control validator for the date filter. */\n    private filterValidator;\n    /**\n     * The form control validator for the range.\n     * Check whether the 'before' value is before the 'to' value\n     * */\n    private rangeValidator;\n    /**\n     * The form control validator for the range when required.\n     * Check whether the 'before' and 'to' values are present\n     * */\n    private requiredRangeValidator;\n    /** The combined form control validator for this input. */\n    private validator;\n    /** Emits when the value changes (either due to user input or programmatic change). */\n    valueChange: EventEmitter<T | T[]>;\n    /** Emits when the disabled state has changed */\n    disabledChange: EventEmitter<boolean>;\n    get owlDateTimeInputAriaHaspopup(): boolean;\n    get owlDateTimeInputAriaOwns(): string;\n    get minIso8601(): string;\n    get maxIso8601(): string;\n    get owlDateTimeInputDisabled(): boolean;\n    constructor(elmRef: ElementRef, renderer: Renderer2, dateTimeAdapter: DateTimeAdapter<T>, dateTimeFormats: OwlDateTimeFormats);\n    ngOnInit(): void;\n    ngAfterContentInit(): void;\n    ngOnDestroy(): void;\n    writeValue(value: any): void;\n    registerOnChange(fn: any): void;\n    registerOnTouched(fn: any): void;\n    setDisabledState(isDisabled: boolean): void;\n    validate(c: AbstractControl): {\n        [key: string]: any;\n    };\n    registerOnValidatorChange(fn: () => void): void;\n    /**\n     * Open the picker when user hold alt + DOWN_ARROW\n     * */\n    handleKeydownOnHost(event: KeyboardEvent): void;\n    handleBlurOnHost(event: Event): void;\n    handleInputOnHost(event: any): void;\n    handleChangeOnHost(event: any): void;\n    /**\n     * Set the native input property 'value'\n     */\n    formatNativeInputValue(): void;\n    /**\n     * Register the relationship between this input and its picker component\n     */\n    private registerDateTimePicker;\n    /**\n     * Convert a given obj to a valid date object\n     */\n    private getValidDate;\n    /**\n     * Convert a time string to a date-time string\n     * When pickerType is 'timer', the value in the picker's input is a time string.\n     * The dateTimeAdapter parse fn could not parse a time string to a Date Object.\n     * Therefore we need this fn to convert a time string to a date-time string.\n     */\n    private convertTimeStringToDateTimeString;\n    /**\n     * Handle input change in single mode\n     */\n    private changeInputInSingleMode;\n    /**\n     * Handle input change in rangeFrom or rangeTo mode\n     */\n    private changeInputInRangeFromToMode;\n    /**\n     * Handle input change in range mode\n     */\n    private changeInputInRangeMode;\n    /**\n     * Check if the two value is the same\n     */\n    private isSameValue;\n}\n"]}