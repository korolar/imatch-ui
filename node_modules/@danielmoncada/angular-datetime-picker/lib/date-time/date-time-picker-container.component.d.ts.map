{"version":3,"file":"date-time-picker-container.component.d.ts","sources":["date-time-picker-container.component.d.ts"],"names":[],"mappingssourcesContent":["/**\n * date-time-picker-container.component\n */\nimport { AfterContentInit, AfterViewInit, ChangeDetectorRef, ElementRef, OnInit } from '@angular/core';\nimport { AnimationEvent } from '@angular/animations';\nimport { OwlDateTimeIntl } from './date-time-picker-intl.service';\nimport { OwlCalendarComponent } from './calendar.component';\nimport { OwlTimerComponent } from './timer.component';\nimport { DateTimeAdapter } from './adapter/date-time-adapter.class';\nimport { OwlDateTime, PickerType } from './date-time.class';\nimport { Observable } from 'rxjs';\nexport declare class OwlDateTimeContainerComponent<T> implements OnInit, AfterContentInit, AfterViewInit {\n    private cdRef;\n    private elmRef;\n    private pickerIntl;\n    private dateTimeAdapter;\n    calendar: OwlCalendarComponent<T>;\n    timer: OwlTimerComponent<T>;\n    picker: OwlDateTime<T>;\n    activeSelectedIndex: number;\n    private retainStartTime;\n    private retainEndTime;\n    /**\n     * Stream emits when try to hide picker\n     * */\n    private hidePicker$;\n    get hidePickerStream(): Observable<any>;\n    /**\n     * Stream emits when try to confirm the selected value\n     * */\n    private confirmSelected$;\n    get confirmSelectedStream(): Observable<any>;\n    private pickerOpened$;\n    get pickerOpenedStream(): Observable<any>;\n    /**\n     * The current picker moment. This determines which time period is shown and which date is\n     * highlighted when using keyboard navigation.\n     */\n    private _clamPickerMoment;\n    get pickerMoment(): T;\n    set pickerMoment(value: T);\n    get pickerType(): PickerType;\n    get cancelLabel(): string;\n    get setLabel(): string;\n    /**\n     * The range 'from' label\n     * */\n    get fromLabel(): string;\n    /**\n     * The range 'to' label\n     * */\n    get toLabel(): string;\n    /**\n     * The range 'from' formatted value\n     * */\n    get fromFormattedValue(): string;\n    /**\n     * The range 'to' formatted value\n     * */\n    get toFormattedValue(): string;\n    /**\n     * Cases in which the control buttons show in the picker\n     * 1) picker mode is 'dialog'\n     * 2) picker type is NOT 'calendar' and the picker mode is NOT 'inline'\n     * */\n    get showControlButtons(): boolean;\n    get containerElm(): HTMLElement;\n    get owlDTContainerClass(): boolean;\n    get owlDTPopupContainerClass(): boolean;\n    get owlDTDialogContainerClass(): boolean;\n    get owlDTInlineContainerClass(): boolean;\n    get owlDTContainerDisabledClass(): boolean;\n    get owlDTContainerId(): string;\n    get owlDTContainerAnimation(): any;\n    constructor(cdRef: ChangeDetectorRef, elmRef: ElementRef, pickerIntl: OwlDateTimeIntl, dateTimeAdapter: DateTimeAdapter<T>);\n    ngOnInit(): void;\n    ngAfterContentInit(): void;\n    ngAfterViewInit(): void;\n    handleContainerAnimationDone(event: AnimationEvent): void;\n    dateSelected(date: T): void;\n    timeSelected(time: T): void;\n    /**\n     * Handle click on cancel button\n     */\n    onCancelClicked(event: any): void;\n    /**\n     * Handle click on set button\n     */\n    onSetClicked(event: any): void;\n    /**\n     * Handle click on inform radio group\n     */\n    handleClickOnInfoGroup(event: any, index: number): void;\n    /**\n     * Handle click on inform radio group\n     */\n    handleKeydownOnInfoGroup(event: any, next: any, index: number): void;\n    /**\n     * Set the value of activeSelectedIndex\n     */\n    private setActiveSelectedIndex;\n    private initPicker;\n    /**\n     * Select calendar date in single mode,\n     * it returns null when date is not selected.\n     */\n    private dateSelectedInSingleMode;\n    /**\n     * Select dates in range Mode\n     */\n    private dateSelectedInRangeMode;\n    /**\n     * Update the given calendar date's time and check if it is valid\n     * Because the calendar date has 00:00:00 as default time, if the picker type is 'both',\n     * we need to update the given calendar date's time before selecting it.\n     * if it is valid, return the updated dateTime\n     * if it is not valid, return null\n     */\n    private updateAndCheckCalendarDate;\n    /**\n     * Focus to the picker\n     * */\n    private focusPicker;\n}\n"]}