{"version":3,"file":"calendar-month-view.component.d.ts","sources":["calendar-month-view.component.d.ts"],"names":[],"mappingssourcesContent":["/**\n * calendar-month-view.component\n */\nimport { AfterContentInit, ChangeDetectorRef, EventEmitter, OnDestroy, OnInit } from '@angular/core';\nimport { CalendarCell, OwlCalendarBodyComponent } from './calendar-body.component';\nimport { DateTimeAdapter } from './adapter/date-time-adapter.class';\nimport { OwlDateTimeFormats } from './adapter/date-time-format.class';\nimport { SelectMode } from './date-time.class';\nexport declare class OwlMonthViewComponent<T> implements OnInit, AfterContentInit, OnDestroy {\n    private cdRef;\n    private dateTimeAdapter;\n    private dateTimeFormats;\n    /**\n     * Whether to hide dates in other months at the start or end of the current month.\n     * */\n    hideOtherMonths: boolean;\n    private isDefaultFirstDayOfWeek;\n    /**\n     * Define the first day of a week\n     * Sunday: 0 - Saturday: 6\n     * */\n    private _firstDayOfWeek;\n    get firstDayOfWeek(): number;\n    set firstDayOfWeek(val: number);\n    /**\n     * The select mode of the picker;\n     * */\n    private _selectMode;\n    get selectMode(): SelectMode;\n    set selectMode(val: SelectMode);\n    /** The currently selected date. */\n    private _selected;\n    get selected(): T | null;\n    set selected(value: T | null);\n    private _selecteds;\n    get selecteds(): T[];\n    set selecteds(values: T[]);\n    private _pickerMoment;\n    get pickerMoment(): T;\n    set pickerMoment(value: T);\n    /**\n     * A function used to filter which dates are selectable\n     * */\n    private _dateFilter;\n    get dateFilter(): (date: T) => boolean;\n    set dateFilter(filter: (date: T) => boolean);\n    /** The minimum selectable date. */\n    private _minDate;\n    get minDate(): T | null;\n    set minDate(value: T | null);\n    /** The maximum selectable date. */\n    private _maxDate;\n    get maxDate(): T | null;\n    set maxDate(value: T | null);\n    private _weekdays;\n    get weekdays(): {\n        long: string;\n        short: string;\n        narrow: string;\n    }[];\n    private _days;\n    get days(): CalendarCell[][];\n    get activeCell(): number;\n    get isInSingleMode(): boolean;\n    get isInRangeMode(): boolean;\n    private firstDateOfMonth;\n    private localeSub;\n    private initiated;\n    private dateNames;\n    /**\n     * The date of the month that today falls on.\n     * */\n    todayDate: number | null;\n    /**\n     * An array to hold all selectedDates' value\n     * the value is the day number in current month\n     * */\n    selectedDates: number[];\n    firstRowOffset: number;\n    /**\n     * Callback to invoke when a new date is selected\n     * */\n    readonly selectedChange: EventEmitter<T>;\n    /**\n     * Callback to invoke when any date is selected.\n     * */\n    readonly userSelection: EventEmitter<void>;\n    /** Emits when any date is activated. */\n    readonly pickerMomentChange: EventEmitter<T>;\n    /** The body of calendar table */\n    calendarBodyElm: OwlCalendarBodyComponent;\n    get owlDTCalendarView(): boolean;\n    constructor(cdRef: ChangeDetectorRef, dateTimeAdapter: DateTimeAdapter<T>, dateTimeFormats: OwlDateTimeFormats);\n    ngOnInit(): void;\n    ngAfterContentInit(): void;\n    ngOnDestroy(): void;\n    /**\n     * Handle a calendarCell selected\n     */\n    selectCalendarCell(cell: CalendarCell): void;\n    /**\n     * Handle a new date selected\n     */\n    private selectDate;\n    /**\n     * Handle keydown event on calendar body\n     */\n    handleCalendarKeydown(event: KeyboardEvent): void;\n    /**\n     * Generate the calendar weekdays array\n     * */\n    private generateWeekDays;\n    /**\n     * Generate the calendar days array\n     * */\n    private generateCalendar;\n    /**\n     * Creates CalendarCell for days.\n     */\n    private createDateCell;\n    /**\n     * Check if the date is valid\n     */\n    private isDateEnabled;\n    /**\n     * Get a valid date object\n     */\n    private getValidDate;\n    /**\n     * Check if the give dates are none-null and in the same month\n     */\n    isSameMonth(dateLeft: T, dateRight: T): boolean;\n    /**\n     * Set the selectedDates value.\n     * In single mode, it has only one value which represent the selected date\n     * In range mode, it would has two values, one for the fromValue and the other for the toValue\n     * */\n    private setSelectedDates;\n    private focusActiveCell;\n}\n"]}